package module

import projects._

object ModuleIntersection {

	def run(ms: ModuleStructure, tdg: TypeStructure, dotname: String) = {
		// assert(ms.tdg.contains(tdg)), where contains operation is for graph subset and not implemented yet
		assert(ms.tdg.nodes.size > tdg.nodes.size)
		
		val overridedTypes = tdg.nodes.values.filter(n => n.inedges.exists(e => e.asInstanceOf[SimpleEdge].getKinds.contains(TypeDepKind.OverridingDep))).toList

		val mstrt = new ModuleStructure(tdg)
		ms.nodes.values.foreach( mn => {
			val newmod = new ModuleNode(mn.value)
			newmod.pkgname = mn.asInstanceOf[ModuleNode].packageName
			
			mstrt.addNode(newmod)
			mn.asInstanceOf[ModuleNode].types.foreach( t => {
					val typenode =  tdg.getNode(t.value).asInstanceOf[TypeNode]
					if (typenode != null ) {
						mstrt.addTypeNode(newmod, typenode.value)
					}
				})
		})

		mstrt.removeNodes(mstrt.nodes.values.filter(m => m.inedges.size  == 0 && m.outedges.size == 0).toList)
		//mstrt.nodes.values.foreach(m => println(m.toString + m.asInstanceOf[ModuleNode].types.mkString(",")))
		
		mstrt.liftEdges
		Graph2Dot.toDot(mstrt, Project.get.getHomePath + dotname)
		
		import TypeDepKind._
		/*Graph2Dot.toDotTypeSubtype(mstrt.nodes.values.toList.map(_.asInstanceOf[ModuleNode]),  tdg.edges, 
				overridedTypes, 
				Project.get.getHomePath + dotname + "_SubtypeGrouped")*/
				
		var mapP2Mns = scala.collection.mutable.Map[String, List[ModuleNode]]()
		mstrt.nodes.values.foreach( n => {
			val mn = n.asInstanceOf[ModuleNode]
			if ( !mapP2Mns.contains(mn.packageName) ) {
				mapP2Mns += (mn.packageName -> List[ModuleNode]())
			}
			mapP2Mns(mn.packageName) = mn :: mapP2Mns(mn.packageName)
		})
		
		var mapP2TEs = scala.collection.mutable.Map[String, List[DepEdge]]()
		mapP2Mns.foreach(p2mn => { 
			val edges = p2mn._2.flatMap(mn => {
				mn.inedges.flatMap(_.asInstanceOf[ModuleEdge].getTypeEdges ) ::: mn.outedges.flatMap(_.asInstanceOf[ModuleEdge].getTypeEdges )
			})
			mapP2TEs += (p2mn._1 -> edges)
		})
		
		//println("**************************")
		//println("SUBTYPE " + mapP2Mns +"\n"  + mapP2TEs)
		
		mapP2Mns.foreach( p2mn => {
			Graph2Dot.toDotTypeGrouped(p2mn._2, mapP2TEs(p2mn._1), Project.get.getHomePath + dotname + "_" + p2mn._1.replace(".", "_"))
		})
	}
}