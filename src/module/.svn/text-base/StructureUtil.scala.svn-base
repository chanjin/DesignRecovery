package module


object StructureUtil {
	def getNewTypeStructure(types: List[NodeElem], edges: List[DepEdge]): TypeStructure = {
		var newtdg = new TypeStructure
		types.foreach(tn => newtdg.addNode(tn.value))
		edges.foreach(te => {
			if ( te.isSubtypeEdge  ) newtdg.addSubtypeEdge(te.getSource.value, te.getTarget.value, te.asInstanceOf[SubtypeEdge].getMethods)
			else {
				val tedge = te.asInstanceOf[SimpleEdge]
				val newedge = newtdg.addSimpleEdge(te.getSource.value, te.getTarget.value, tedge.getKinds.head)
				newedge.addKinds(tedge.getKinds.tail)
			}
		})
		newtdg
	}
	
	def getNewPackageStructure(packages: List[NodeElem], edges: List[DepEdge], ts: TypeStructure) : PackageStructure = {
		var newpdg = new PackageStructure(ts)
		for ( pn <- packages ) {
			val newpn = newpdg.addNode(pn.value )
			val pntypes = pn.asInstanceOf[ModuleNode].types
			pntypes.foreach(tn => newpdg.addTypeNode(newpn, tn.value))
		}
		newpdg.liftEdges
		newpdg
	}
	
	def toDotSubGraph(filename: String, nodeColor: NodeElem => String, pkgs: PackageStructure, pkg: List[String]) = {
		val ps = pkgs.nodes.values.toList.filter(p =>pkg.contains(p.value))
		val pedges = pkgs.edges.filter(e => pkg.contains(e.getSource.value) && pkg.contains(e.getTarget))
		val tnodes = ps.flatMap(_.asInstanceOf[ModuleNode].types )
		val tedges = pedges.flatMap(_.asInstanceOf[ModuleEdge].getTypeEdges).removeDuplicates
		val tdg = getNewTypeStructure(tnodes, tedges)
		val pdg = getNewPackageStructure(ps, pedges, tdg)
		Graph2Dot.toDot(pdg, filename)
	}
	
	def toDotSubGraph(filename: String, nodeColor: NodeElem => String, pkgs: LayeredPackageStructure, pkg: List[String]) = {
		val ps = pkgs.nodes.values.toList.filter(p =>pkg.contains(p.value))
		val pedges = pkgs.edges.filter(e => pkg.contains(e.getSource.value) && pkg.contains(e.getTarget))
		val tnodes = ps.flatMap(_.asInstanceOf[ModuleNode].types )
		val tedges = pedges.flatMap(_.asInstanceOf[ModuleEdge].getTypeEdges).removeDuplicates
		val tdg = getNewTypeStructure(tnodes, tedges)
		val pdg = getNewPackageStructure(ps, pedges, tdg)
		Graph2Dot.toDot(pdg, filename)
	}
}

object PkgNodeColor {
	private val colormap =Array( "aliceblue", "aquamarine",  "cyan",  "gold",  "yellow",  "steelblue",  "steelblue1", 
			"darkturquoise",  "deepskyblue",  "chartreuse", "mintcream", "linen", "papayawhip", "beige", "bisque", 
			"cornsilk", "darkseagreen", "floralwhite", "gainsboro", "ivory", "lightcyan", "aliceblue", "aquamarine",  "cyan",  "gold",  "yellow",  "steelblue",  "steelblue1", 
			"darkturquoise",  "deepskyblue",  "chartreuse", "mintcream", "linen", "papayawhip", "beige", "bisque", 
			"cornsilk", "darkseagreen", "floralwhite", "gainsboro", "ivory", "lightcyan")
	private var pkgcolor = scala.collection.mutable.Map[String, String] ()
	
	def initPkgcolor(pdg: PackageStructure) = {
		var i = 0
		pkgcolor.empty
		for ( p <- pdg.nodes.keys) {
			pkgcolor += (p -> colormap(i % colormap.length))
			i = i+1 
		}
	}
	
	def packageNodeColor(n: NodeElem): String =  ", color= " + pkgcolor(n.value)
	
	def layerPackageNodeColor(n: NodeElem): String = {
		val key = n.asInstanceOf[LayerModuleNode].pkgname
		", color= " + (if ( pkgcolor.contains(key))  pkgcolor(key) else colormap(colormap.length - 1))
	}
	
}