package module
import projects._

object SubtypeStructures {
	
	def getOverridingTypeGraph(originaltdg: TypeStructure ) : TypeStructure = {
		import TypeDepKind._
		val tdg = new TypeStructure
		originaltdg.nodes.values.foreach(n => tdg.addNode(n.value))
		originaltdg.edges.foreach(e => { 
			val kinds = e.asInstanceOf[SimpleEdge].getKinds
			if ( kinds.contains(TypeDepKind.OverridingDep ) ) {	
				tdg.addSubtypeEdge(e.getSource.value, e.getTarget.value, e.asInstanceOf[SubtypeEdge].getMethods)
			}
		})
		
		tdg.removeNodes(tdg.nodes.values.filter(n => ( n.inedges.size == 0 && n.outedges.size == 0) ).toList)
		tdg
	}
	
	def run(originaltdg: TypeStructure) = {
		Graph2Dot.toDotType(getOverridingTypeGraph(originaltdg), Project.get.getHomePath + "SubtypeGraph")
	}
	
	
}