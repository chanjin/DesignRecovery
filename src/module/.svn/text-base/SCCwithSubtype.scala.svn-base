package module
import projects._

object SCCwithSubtype {
	def run(tdg: TypeStructure) = {
		val scclist = tdg.detectSCC
		val scclistsubtype = scclist.filter(sccnodes =>tdg.filterEdges(sccnodes).exists(edge => edge.isSubtypeEdge) )
		var count = 0
		scclistsubtype.foreach( scc => { 
			Graph2Dot.toDotType(tdg, Project.get.getHomePath + "SCCWithSubtypes_" + count +"_" + scc.length, scc)
			count += 1
		} )
	}
	
	def runWithStructural(originaltdg: TypeStructure) = {
		import TypeDepKind._
		val tdg = new TypeStructure
		originaltdg.nodes.values.foreach(n => tdg.addNode(n.value))
		originaltdg.edges.foreach(e => { 
			val kinds = e.asInstanceOf[SimpleEdge].getKinds
			if ( !( kinds.length == 1 && kinds.head == TypeDepKind.CodeDep ) ) { // excludes code dependency
				var newedge: SimpleEdge = null
				if ( e.isSubtypeEdge ) 
					newedge = tdg.addSubtypeEdge(e.getSource.value, e.getTarget.value, e.asInstanceOf[SubtypeEdge].getMethods)
				else 
					newedge = tdg.addSimpleEdge(e.getSource.value , e.getTarget.value, kinds.head)
				newedge.addKinds(kinds)
			}
		})
		
		
		val scclist = tdg.detectSCC
		val scclistsubtype = scclist.filter(sccnodes =>tdg.filterEdges(sccnodes).exists(edge => edge.isSubtypeEdge) )
	
		var count = 0
		scclistsubtype.foreach( scc => { 
			Graph2Dot.toDotType(tdg, Project.get.getHomePath + "StructuralSCCWithSubtypes_" + count +"_" + scc.length, scc)
			count += 1
		} )
	}
}