package constructor

import bcel._
import org.apache.bcel._
import org.apache.bcel.classfile._
import java.io.File
import java.io.{FileOutputStream, PrintWriter}
import module._
import scala.xml.XML
import projects._

object GraphFile {
	
	private var _filename: String = null
	
	def store(filename: String, writeFtn: PrintWriter =>Unit) = {
		// tdg and pdg
		_filename = filename
		var fos: FileOutputStream = null
		var writer: PrintWriter = null
		try{   
			fos = new FileOutputStream(filename)
		  	writer = new PrintWriter(fos, true)
		  	writeFtn(writer)
		 }
	    finally {
	    	writer.close()
		  	fos.close()
	    }
	}
	
	def load(filename: String ): (TypeStructure, PackageStructure) = {
		import scala.io.Source
		val src = Source.fromFile(new File(filename))
		var tdg = new TypeStructure
		var pdg = new PackageStructure(tdg)
		
		object mode extends Enumeration {
			val Initial, Project, Node, Edge = Value
	    }
		var modeinload =mode.Initial
		var id2type = Map[Int, String]()
		src.getLines("\n").foreach(line => {
			if ( line == "project" ) modeinload = mode.Project
			else if ( line == "nodes" ) modeinload = mode.Node
			else if ( line == "edges" ) modeinload = mode.Edge
			else {
				if ( modeinload == mode.Project ) { // Refer to projects.ProjectCase.toFile 
					Project.proj = Project.proj.fromFile(line)
				}
				else if ( modeinload == mode.Node ) { //8:pattern.CompositeFigure
					val id = Integer.parseInt(line.substring(0, line.indexOf(":")))
					val typename = line.substring(line.indexOf(":") + 1)
					
					tdg.addNode(typename)
					id2type += (id -> typename)
					
					val pkgname = typename.substring(0, typename.lastIndexOf("."))
					pdg.addTypeNode(pdg.addNode(pkgname), typename)
					
					//println( id + ", " + typename)
					//tdg.addNode(line.substring())
				}
				else if ( modeinload == mode.Edge ) { //2->4:S, I
					val from =  Integer.parseInt(line.substring(0, line.indexOf("->")))
					val to =  Integer.parseInt(line.substring(line.indexOf("->") + 2, line.indexOf(":")) )
					val attr = line.substring(line.indexOf(":") + 1)
					import java.util.StringTokenizer
					val st = new StringTokenizer(attr, ",")
					import TypeDepKind._
					var kinds =  List[TypeDepKind]()
					while (st.hasMoreTokens) {
						val dep = st.nextToken
						kinds = TypeDepKind.kindFromStr(dep) :: kinds
					}
					
					//println(from + "->" + to + ": " + attr)
					val newedge =  if ( kinds.contains(TypeDepKind.OverridingDep )) 
												tdg.addSubtypeEdge(id2type(from), id2type(to), Nil)
										else 
											tdg.addSimpleEdge(id2type(from), id2type(to), kinds.head) 
					newedge.addKinds(kinds)
				}
			}
		})
		
		pdg.liftEdges()
		(tdg, pdg)
	}
	
	
	
	def getEdgeAttr(e: DepEdge): String = e.asInstanceOf[SimpleEdge].getDepCode
	
	def storeTypeGraph(tdg: TypeStructure)(w: PrintWriter) = {
		val nodes = tdg.nodes
		val edges = tdg.edges

		w.println(projects.Project.get.toFile )
		val (node2id, count) = 
			nodes.foldLeft( (scala.collection.mutable.Map[String, Int](), 0) ) ( (m, n) => ((m._1 + (n._1 -> m._2)), m._2 + 1))
		w.println("nodes")
		node2id.foreach(n2i => w.println(n2i._2 + ":" + n2i._1))
		w.println("edges")
		
		edges.foreach( e => w.println( node2id(e.getSource.toString) + "->" + node2id(e.getTarget.toString) + ":" + getEdgeAttr(e)) )
	}
	
/*	def storeTypeGraphToDot(tdg: TypeStructure)(w: PrintWriter)  = {
		val nodes = tdg.nodes
		val edges = tdg.edges
		val (node2id: scala.collection.mutable.Map[String, Int], count) = 
			nodes.foldLeft( (scala.collection.mutable.Map[String, Int](), 0) ) ( (m, n) => ((m._1 + (n._1 -> m._2)), m._2 + 1))
		w.println(graph.GraphConstructor.toDot(node2id, edges, _filename.substring(0, _filename.lastIndexOf("."))))
	}
	*/
	
	/*def toXML(node2id: scala.collection.mutable.Map[String, Int], edges: List[DepEdge], xmlfile: String): Unit = {
		val nodexml =
			<typegraph>
			<nodes>
				{ for ( n2i <- node2id ) yield 	
				<node id = { n2i._2.toString } > { n2i._1 }  </node>
				}
			</nodes>
			<edges>
				{ for ( e <- edges ) yield
				<edge from = { node2id(e.getSource.toString).toString } to = { node2id(e.getTarget.toString).toString } attribute = { getEdgeAttr(e) } />
				}
			</edges>
			</typegraph>
			
		XML.saveFull(xmlfile, nodexml, "UTF-8", true, null)	
	}*/
	
}