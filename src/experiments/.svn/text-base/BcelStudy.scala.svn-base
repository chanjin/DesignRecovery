package experiments
import projects._

class BcelStudy extends PackageCycleAnalysis {

	override def  getViolationMap: Map[String, List[String]]  = {
		Map[String, List[String]](
			"classfile" -> List("generic", ".", "util"),
			"generic" -> List("util", "."),
			"util" -> List(".")
			)
	}
	
	override def getNewPacakgeMap: Map[String, List[List[Int]]] = {
		Map[String, List[List[Int]]] (
				"util" -> List(List(0), List(1,2,4)),
				"." -> List(List(0), List(1, 2, 3, 4))
		)
	}
	
	override def getRefactoredEdges: Map[(String, String), (List[Int], List[Int])]  = {
		Map[(String, String), (List[Int], List[Int])]  (
				("classfile", "util") ->  (List(-1), List(1, 2, 4)), 
				("classfile", "generic") -> (List(-1), List(1)),
				("generic", ".") -> (List(-1), List(1)),
				("util", ".") -> (List(-1),  List(1))
		)
	}
	
}

import module._

object BcelStudy {
	def main(args : Array[String]) : Unit = {
		projects.Project.proj = (new BcelCase)
		val (tdg: TypeStructure, pdg, lpdg: LayeredPackageStructure) = (new BcelStudy).run
		
/*		import trace._
		val traceAnalyzer = new TraceAnalyzer(tdg)
		traceAnalyzer.run(projects.Project.get.getHomePath + "/Method.log", 
				projects.Project.get.getHomePath+ "/Call.log", lpdg)*/
	}
}