package experiments

import module._

class LuceneStudy extends PackageCycleAnalysis {
	
	override def  getViolationMap: Map[String, List[String]]  = {
		Map[String, List[String]](
				"util" -> List("search", ".", "index", "store"),
				"index" -> List("search"),
				"analysis" -> List("document", "index"),
				"store" -> List("index", "util")
				)
		
	
	}
	
	override def getNewPacakgeMap: Map[String, List[List[Int]]] = {
		Map[String, List[List[Int]]] (
				"search" -> List(List(0,1, 2), List(3), List( 4, 5, 6)),
				"util" -> List(List(0,1), List(2, 3)),
				"index" -> List(List(0,1), List(2, 3, 4))
				//"." -> List(List(0), List(1, 2, 3, 4))
		)
	}
	
	override def getRefactoredEdges: Map[(String, String), (List[Int], List[Int])]  = {
		Map[(String, String), (List[Int], List[Int])]  (
				("util", "index") ->  (List(3), List(3)),
				("util", "store") ->  (List(0), List(0)),
				("util", ".") ->  (List(0), List(0)),
				("store", "index") -> (List(0), List(0)),
				("analysis", "document") -> (List(0), List(0)), 
				("analysis", "index") -> (List(0, 1), List(0)),
				("analysis", "store") -> (List(0), List(0)),
				("search", "util") -> (List(3), List(2,3)),
				("search", "index") -> (List(3), List(3))
		)
	}	
	override def getDesignRuleClass() : List[String] = {
		List[String](
				"LucenePackage",
				"search.DocIdSet", "search.DocIdSetIterator", "search.Scorer", "search.FieldCache", "search.FieldCache$CreationPlaceholder", "search.FieldCache$CacheEntry",
				"search.Similarity", "search.Searcher", "search.Query", "search.Weight", "search.DefaultSimilarity",
				"document.Fieldable", 
				"index.Payload", "index.IndexReader", "index.IndexFileNameFilter",
				"store.Directory", "store.IndexOutput", "store.IndexInput"
		).map(project.prefix + "." + _)
	}
	
}

object LuceneStudy {
	def main(args : Array[String]) : Unit = {
		projects.Project.proj = new projects.LuceneCase
		
		val (tdg: TypeStructure, pdg, lpdg: LayeredPackageStructure) = (new LuceneStudy).run
		//return
		//traceAnalysis(tdg, lpdg)
		
	}
	
	def traceAnalysis(tdg: TypeStructure, lpdg: LayeredPackageStructure)= {
		import trace._
		val traceAnalyzer = new TraceAnalyzer(tdg)
		traceAnalyzer.run(projects.Project.get.getHomePath + "/TestDemo_testDemo_Method.log", 
		projects.Project.get.getHomePath+ "/TestDemo_testDemo_Call.log", lpdg)
	}
}